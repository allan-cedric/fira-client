// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fira_message {
namespace sim_to_ref {

namespace {

const ::google::protobuf::Descriptor* Ball_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ball_reflection_ = NULL;
const ::google::protobuf::Descriptor* Robot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Robot_reflection_ = NULL;
const ::google::protobuf::Descriptor* Field_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Field_reflection_ = NULL;
const ::google::protobuf::Descriptor* Frame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Frame_reflection_ = NULL;
const ::google::protobuf::Descriptor* Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_reflection_ = NULL;
const ::google::protobuf::Descriptor* Commands_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Commands_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_reflection_ = NULL;
const ::google::protobuf::Descriptor* Environment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Environment_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_common_2eproto() {
  protobuf_AddDesc_common_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common.proto");
  GOOGLE_CHECK(file != NULL);
  Ball_descriptor_ = file->message_type(0);
  static const int Ball_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, vx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, vy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, vz_),
  };
  Ball_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Ball_descriptor_,
      Ball::default_instance_,
      Ball_offsets_,
      -1,
      -1,
      -1,
      sizeof(Ball),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, _is_default_instance_));
  Robot_descriptor_ = file->message_type(1);
  static const int Robot_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, robot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, vx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, vy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, vorientation_),
  };
  Robot_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Robot_descriptor_,
      Robot::default_instance_,
      Robot_offsets_,
      -1,
      -1,
      -1,
      sizeof(Robot),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, _is_default_instance_));
  Field_descriptor_ = file->message_type(2);
  static const int Field_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, goal_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, goal_depth_),
  };
  Field_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Field_descriptor_,
      Field::default_instance_,
      Field_offsets_,
      -1,
      -1,
      -1,
      sizeof(Field),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, _is_default_instance_));
  Frame_descriptor_ = file->message_type(3);
  static const int Frame_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, ball_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, robots_yellow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, robots_blue_),
  };
  Frame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Frame_descriptor_,
      Frame::default_instance_,
      Frame_offsets_,
      -1,
      -1,
      -1,
      sizeof(Frame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, _is_default_instance_));
  Command_descriptor_ = file->message_type(4);
  static const int Command_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, yellowteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, wheel_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, wheel_right_),
  };
  Command_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Command_descriptor_,
      Command::default_instance_,
      Command_offsets_,
      -1,
      -1,
      -1,
      sizeof(Command),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _is_default_instance_));
  Commands_descriptor_ = file->message_type(5);
  static const int Commands_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Commands, robot_commands_),
  };
  Commands_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Commands_descriptor_,
      Commands::default_instance_,
      Commands_offsets_,
      -1,
      -1,
      -1,
      sizeof(Commands),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Commands, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Commands, _is_default_instance_));
  Packet_descriptor_ = file->message_type(6);
  static const int Packet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, cmd_),
  };
  Packet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Packet_descriptor_,
      Packet::default_instance_,
      Packet_offsets_,
      -1,
      -1,
      -1,
      sizeof(Packet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, _is_default_instance_));
  Environment_descriptor_ = file->message_type(7);
  static const int Environment_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Environment, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Environment, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Environment, field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Environment, goals_blue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Environment, goals_yellow_),
  };
  Environment_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Environment_descriptor_,
      Environment::default_instance_,
      Environment_offsets_,
      -1,
      -1,
      -1,
      sizeof(Environment),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Environment, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Environment, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Ball_descriptor_, &Ball::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Robot_descriptor_, &Robot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Field_descriptor_, &Field::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Frame_descriptor_, &Frame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Command_descriptor_, &Command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Commands_descriptor_, &Commands::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Packet_descriptor_, &Packet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Environment_descriptor_, &Environment::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2eproto() {
  delete Ball::default_instance_;
  delete Ball_reflection_;
  delete Robot::default_instance_;
  delete Robot_reflection_;
  delete Field::default_instance_;
  delete Field_reflection_;
  delete Frame::default_instance_;
  delete Frame_reflection_;
  delete Command::default_instance_;
  delete Command_reflection_;
  delete Commands::default_instance_;
  delete Commands_reflection_;
  delete Packet::default_instance_;
  delete Packet_reflection_;
  delete Environment::default_instance_;
  delete Environment_reflection_;
}

void protobuf_AddDesc_common_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_common_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014common.proto\022\027fira_message.sim_to_ref\""
    "K\n\004Ball\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001"
    "\022\n\n\002vx\030\004 \001(\001\022\n\n\002vy\030\005 \001(\001\022\n\n\002vz\030\006 \001(\001\"r\n\005"
    "Robot\022\020\n\010robot_id\030\001 \001(\r\022\t\n\001x\030\002 \001(\001\022\t\n\001y\030"
    "\003 \001(\001\022\023\n\013orientation\030\004 \001(\001\022\n\n\002vx\030\005 \001(\001\022\n"
    "\n\002vy\030\006 \001(\001\022\024\n\014vorientation\030\007 \001(\001\"N\n\005Fiel"
    "d\022\r\n\005width\030\001 \001(\001\022\016\n\006length\030\002 \001(\001\022\022\n\ngoal"
    "_width\030\003 \001(\001\022\022\n\ngoal_depth\030\004 \001(\001\"\240\001\n\005Fra"
    "me\022+\n\004ball\030\001 \001(\0132\035.fira_message.sim_to_r"
    "ef.Ball\0225\n\rrobots_yellow\030\002 \003(\0132\036.fira_me"
    "ssage.sim_to_ref.Robot\0223\n\013robots_blue\030\003 "
    "\003(\0132\036.fira_message.sim_to_ref.Robot\"R\n\007C"
    "ommand\022\n\n\002id\030\001 \001(\r\022\022\n\nyellowteam\030\002 \001(\010\022\022"
    "\n\nwheel_left\030\006 \001(\001\022\023\n\013wheel_right\030\007 \001(\001\""
    "D\n\010Commands\0228\n\016robot_commands\030\001 \003(\0132 .fi"
    "ra_message.sim_to_ref.Command\"8\n\006Packet\022"
    ".\n\003cmd\030\001 \001(\0132!.fira_message.sim_to_ref.C"
    "ommands\"\243\001\n\013Environment\022\014\n\004step\030\001 \001(\r\022-\n"
    "\005frame\030\002 \001(\0132\036.fira_message.sim_to_ref.F"
    "rame\022-\n\005field\030\003 \001(\0132\036.fira_message.sim_t"
    "o_ref.Field\022\022\n\ngoals_blue\030\004 \001(\r\022\024\n\014goals"
    "_yellow\030\005 \001(\rb\006proto3", 861);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common.proto", &protobuf_RegisterTypes);
  Ball::default_instance_ = new Ball();
  Robot::default_instance_ = new Robot();
  Field::default_instance_ = new Field();
  Frame::default_instance_ = new Frame();
  Command::default_instance_ = new Command();
  Commands::default_instance_ = new Commands();
  Packet::default_instance_ = new Packet();
  Environment::default_instance_ = new Environment();
  Ball::default_instance_->InitAsDefaultInstance();
  Robot::default_instance_->InitAsDefaultInstance();
  Field::default_instance_->InitAsDefaultInstance();
  Frame::default_instance_->InitAsDefaultInstance();
  Command::default_instance_->InitAsDefaultInstance();
  Commands::default_instance_->InitAsDefaultInstance();
  Packet::default_instance_->InitAsDefaultInstance();
  Environment::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2eproto {
  StaticDescriptorInitializer_common_2eproto() {
    protobuf_AddDesc_common_2eproto();
  }
} static_descriptor_initializer_common_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ball::kXFieldNumber;
const int Ball::kYFieldNumber;
const int Ball::kZFieldNumber;
const int Ball::kVxFieldNumber;
const int Ball::kVyFieldNumber;
const int Ball::kVzFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ball::Ball()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fira_message.sim_to_ref.Ball)
}

void Ball::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Ball::Ball(const Ball& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fira_message.sim_to_ref.Ball)
}

void Ball::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  vx_ = 0;
  vy_ = 0;
  vz_ = 0;
}

Ball::~Ball() {
  // @@protoc_insertion_point(destructor:fira_message.sim_to_ref.Ball)
  SharedDtor();
}

void Ball::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ball::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ball::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ball_descriptor_;
}

const Ball& Ball::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

Ball* Ball::default_instance_ = NULL;

Ball* Ball::New(::google::protobuf::Arena* arena) const {
  Ball* n = new Ball;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ball::Clear() {
// @@protoc_insertion_point(message_clear_start:fira_message.sim_to_ref.Ball)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Ball, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Ball*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, vz_);

#undef ZR_HELPER_
#undef ZR_

}

bool Ball::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fira_message.sim_to_ref.Ball)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_vx;
        break;
      }

      // optional double vx = 4;
      case 4: {
        if (tag == 33) {
         parse_vx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vx_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_vy;
        break;
      }

      // optional double vy = 5;
      case 5: {
        if (tag == 41) {
         parse_vy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vy_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_vz;
        break;
      }

      // optional double vz = 6;
      case 6: {
        if (tag == 49) {
         parse_vz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vz_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fira_message.sim_to_ref.Ball)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fira_message.sim_to_ref.Ball)
  return false;
#undef DO_
}

void Ball::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fira_message.sim_to_ref.Ball)
  // optional double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // optional double vx = 4;
  if (this->vx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->vx(), output);
  }

  // optional double vy = 5;
  if (this->vy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->vy(), output);
  }

  // optional double vz = 6;
  if (this->vz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->vz(), output);
  }

  // @@protoc_insertion_point(serialize_end:fira_message.sim_to_ref.Ball)
}

::google::protobuf::uint8* Ball::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fira_message.sim_to_ref.Ball)
  // optional double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // optional double vx = 4;
  if (this->vx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->vx(), target);
  }

  // optional double vy = 5;
  if (this->vy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->vy(), target);
  }

  // optional double vz = 6;
  if (this->vz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->vz(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fira_message.sim_to_ref.Ball)
  return target;
}

int Ball::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:fira_message.sim_to_ref.Ball)
  int total_size = 0;

  // optional double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // optional double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // optional double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  // optional double vx = 4;
  if (this->vx() != 0) {
    total_size += 1 + 8;
  }

  // optional double vy = 5;
  if (this->vy() != 0) {
    total_size += 1 + 8;
  }

  // optional double vz = 6;
  if (this->vz() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ball::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fira_message.sim_to_ref.Ball)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Ball* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Ball>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fira_message.sim_to_ref.Ball)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fira_message.sim_to_ref.Ball)
    MergeFrom(*source);
  }
}

void Ball::MergeFrom(const Ball& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fira_message.sim_to_ref.Ball)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.vx() != 0) {
    set_vx(from.vx());
  }
  if (from.vy() != 0) {
    set_vy(from.vy());
  }
  if (from.vz() != 0) {
    set_vz(from.vz());
  }
}

void Ball::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fira_message.sim_to_ref.Ball)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ball::CopyFrom(const Ball& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fira_message.sim_to_ref.Ball)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ball::IsInitialized() const {

  return true;
}

void Ball::Swap(Ball* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ball::InternalSwap(Ball* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(vx_, other->vx_);
  std::swap(vy_, other->vy_);
  std::swap(vz_, other->vz_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ball::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ball_descriptor_;
  metadata.reflection = Ball_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ball

// optional double x = 1;
void Ball::clear_x() {
  x_ = 0;
}
 double Ball::x() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Ball.x)
  return x_;
}
 void Ball::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Ball.x)
}

// optional double y = 2;
void Ball::clear_y() {
  y_ = 0;
}
 double Ball::y() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Ball.y)
  return y_;
}
 void Ball::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Ball.y)
}

// optional double z = 3;
void Ball::clear_z() {
  z_ = 0;
}
 double Ball::z() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Ball.z)
  return z_;
}
 void Ball::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Ball.z)
}

// optional double vx = 4;
void Ball::clear_vx() {
  vx_ = 0;
}
 double Ball::vx() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Ball.vx)
  return vx_;
}
 void Ball::set_vx(double value) {
  
  vx_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Ball.vx)
}

// optional double vy = 5;
void Ball::clear_vy() {
  vy_ = 0;
}
 double Ball::vy() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Ball.vy)
  return vy_;
}
 void Ball::set_vy(double value) {
  
  vy_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Ball.vy)
}

// optional double vz = 6;
void Ball::clear_vz() {
  vz_ = 0;
}
 double Ball::vz() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Ball.vz)
  return vz_;
}
 void Ball::set_vz(double value) {
  
  vz_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Ball.vz)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Robot::kRobotIdFieldNumber;
const int Robot::kXFieldNumber;
const int Robot::kYFieldNumber;
const int Robot::kOrientationFieldNumber;
const int Robot::kVxFieldNumber;
const int Robot::kVyFieldNumber;
const int Robot::kVorientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Robot::Robot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fira_message.sim_to_ref.Robot)
}

void Robot::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Robot::Robot(const Robot& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fira_message.sim_to_ref.Robot)
}

void Robot::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  robot_id_ = 0u;
  x_ = 0;
  y_ = 0;
  orientation_ = 0;
  vx_ = 0;
  vy_ = 0;
  vorientation_ = 0;
}

Robot::~Robot() {
  // @@protoc_insertion_point(destructor:fira_message.sim_to_ref.Robot)
  SharedDtor();
}

void Robot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Robot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Robot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Robot_descriptor_;
}

const Robot& Robot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

Robot* Robot::default_instance_ = NULL;

Robot* Robot::New(::google::protobuf::Arena* arena) const {
  Robot* n = new Robot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Robot::Clear() {
// @@protoc_insertion_point(message_clear_start:fira_message.sim_to_ref.Robot)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Robot, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Robot*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, robot_id_);

#undef ZR_HELPER_
#undef ZR_

}

bool Robot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fira_message.sim_to_ref.Robot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 robot_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robot_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_x;
        break;
      }

      // optional double x = 2;
      case 2: {
        if (tag == 17) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_y;
        break;
      }

      // optional double y = 3;
      case 3: {
        if (tag == 25) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_orientation;
        break;
      }

      // optional double orientation = 4;
      case 4: {
        if (tag == 33) {
         parse_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &orientation_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_vx;
        break;
      }

      // optional double vx = 5;
      case 5: {
        if (tag == 41) {
         parse_vx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vx_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_vy;
        break;
      }

      // optional double vy = 6;
      case 6: {
        if (tag == 49) {
         parse_vy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vy_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_vorientation;
        break;
      }

      // optional double vorientation = 7;
      case 7: {
        if (tag == 57) {
         parse_vorientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vorientation_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fira_message.sim_to_ref.Robot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fira_message.sim_to_ref.Robot)
  return false;
#undef DO_
}

void Robot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fira_message.sim_to_ref.Robot)
  // optional uint32 robot_id = 1;
  if (this->robot_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->robot_id(), output);
  }

  // optional double x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->x(), output);
  }

  // optional double y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->y(), output);
  }

  // optional double orientation = 4;
  if (this->orientation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->orientation(), output);
  }

  // optional double vx = 5;
  if (this->vx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->vx(), output);
  }

  // optional double vy = 6;
  if (this->vy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->vy(), output);
  }

  // optional double vorientation = 7;
  if (this->vorientation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->vorientation(), output);
  }

  // @@protoc_insertion_point(serialize_end:fira_message.sim_to_ref.Robot)
}

::google::protobuf::uint8* Robot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fira_message.sim_to_ref.Robot)
  // optional uint32 robot_id = 1;
  if (this->robot_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->robot_id(), target);
  }

  // optional double x = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->x(), target);
  }

  // optional double y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->y(), target);
  }

  // optional double orientation = 4;
  if (this->orientation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->orientation(), target);
  }

  // optional double vx = 5;
  if (this->vx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->vx(), target);
  }

  // optional double vy = 6;
  if (this->vy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->vy(), target);
  }

  // optional double vorientation = 7;
  if (this->vorientation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->vorientation(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fira_message.sim_to_ref.Robot)
  return target;
}

int Robot::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:fira_message.sim_to_ref.Robot)
  int total_size = 0;

  // optional uint32 robot_id = 1;
  if (this->robot_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->robot_id());
  }

  // optional double x = 2;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // optional double y = 3;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // optional double orientation = 4;
  if (this->orientation() != 0) {
    total_size += 1 + 8;
  }

  // optional double vx = 5;
  if (this->vx() != 0) {
    total_size += 1 + 8;
  }

  // optional double vy = 6;
  if (this->vy() != 0) {
    total_size += 1 + 8;
  }

  // optional double vorientation = 7;
  if (this->vorientation() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Robot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fira_message.sim_to_ref.Robot)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Robot* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Robot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fira_message.sim_to_ref.Robot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fira_message.sim_to_ref.Robot)
    MergeFrom(*source);
  }
}

void Robot::MergeFrom(const Robot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fira_message.sim_to_ref.Robot)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.robot_id() != 0) {
    set_robot_id(from.robot_id());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.orientation() != 0) {
    set_orientation(from.orientation());
  }
  if (from.vx() != 0) {
    set_vx(from.vx());
  }
  if (from.vy() != 0) {
    set_vy(from.vy());
  }
  if (from.vorientation() != 0) {
    set_vorientation(from.vorientation());
  }
}

void Robot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fira_message.sim_to_ref.Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot::CopyFrom(const Robot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fira_message.sim_to_ref.Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot::IsInitialized() const {

  return true;
}

void Robot::Swap(Robot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Robot::InternalSwap(Robot* other) {
  std::swap(robot_id_, other->robot_id_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(orientation_, other->orientation_);
  std::swap(vx_, other->vx_);
  std::swap(vy_, other->vy_);
  std::swap(vorientation_, other->vorientation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Robot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Robot_descriptor_;
  metadata.reflection = Robot_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Robot

// optional uint32 robot_id = 1;
void Robot::clear_robot_id() {
  robot_id_ = 0u;
}
 ::google::protobuf::uint32 Robot::robot_id() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Robot.robot_id)
  return robot_id_;
}
 void Robot::set_robot_id(::google::protobuf::uint32 value) {
  
  robot_id_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Robot.robot_id)
}

// optional double x = 2;
void Robot::clear_x() {
  x_ = 0;
}
 double Robot::x() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Robot.x)
  return x_;
}
 void Robot::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Robot.x)
}

// optional double y = 3;
void Robot::clear_y() {
  y_ = 0;
}
 double Robot::y() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Robot.y)
  return y_;
}
 void Robot::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Robot.y)
}

// optional double orientation = 4;
void Robot::clear_orientation() {
  orientation_ = 0;
}
 double Robot::orientation() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Robot.orientation)
  return orientation_;
}
 void Robot::set_orientation(double value) {
  
  orientation_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Robot.orientation)
}

// optional double vx = 5;
void Robot::clear_vx() {
  vx_ = 0;
}
 double Robot::vx() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Robot.vx)
  return vx_;
}
 void Robot::set_vx(double value) {
  
  vx_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Robot.vx)
}

// optional double vy = 6;
void Robot::clear_vy() {
  vy_ = 0;
}
 double Robot::vy() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Robot.vy)
  return vy_;
}
 void Robot::set_vy(double value) {
  
  vy_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Robot.vy)
}

// optional double vorientation = 7;
void Robot::clear_vorientation() {
  vorientation_ = 0;
}
 double Robot::vorientation() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Robot.vorientation)
  return vorientation_;
}
 void Robot::set_vorientation(double value) {
  
  vorientation_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Robot.vorientation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Field::kWidthFieldNumber;
const int Field::kLengthFieldNumber;
const int Field::kGoalWidthFieldNumber;
const int Field::kGoalDepthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Field::Field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fira_message.sim_to_ref.Field)
}

void Field::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Field::Field(const Field& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fira_message.sim_to_ref.Field)
}

void Field::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  width_ = 0;
  length_ = 0;
  goal_width_ = 0;
  goal_depth_ = 0;
}

Field::~Field() {
  // @@protoc_insertion_point(destructor:fira_message.sim_to_ref.Field)
  SharedDtor();
}

void Field::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Field::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Field_descriptor_;
}

const Field& Field::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

Field* Field::default_instance_ = NULL;

Field* Field::New(::google::protobuf::Arena* arena) const {
  Field* n = new Field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Field::Clear() {
// @@protoc_insertion_point(message_clear_start:fira_message.sim_to_ref.Field)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Field, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Field*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(width_, goal_depth_);

#undef ZR_HELPER_
#undef ZR_

}

bool Field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fira_message.sim_to_ref.Field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double width = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_length;
        break;
      }

      // optional double length = 2;
      case 2: {
        if (tag == 17) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_goal_width;
        break;
      }

      // optional double goal_width = 3;
      case 3: {
        if (tag == 25) {
         parse_goal_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &goal_width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_goal_depth;
        break;
      }

      // optional double goal_depth = 4;
      case 4: {
        if (tag == 33) {
         parse_goal_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &goal_depth_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fira_message.sim_to_ref.Field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fira_message.sim_to_ref.Field)
  return false;
#undef DO_
}

void Field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fira_message.sim_to_ref.Field)
  // optional double width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->width(), output);
  }

  // optional double length = 2;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->length(), output);
  }

  // optional double goal_width = 3;
  if (this->goal_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->goal_width(), output);
  }

  // optional double goal_depth = 4;
  if (this->goal_depth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->goal_depth(), output);
  }

  // @@protoc_insertion_point(serialize_end:fira_message.sim_to_ref.Field)
}

::google::protobuf::uint8* Field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fira_message.sim_to_ref.Field)
  // optional double width = 1;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->width(), target);
  }

  // optional double length = 2;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->length(), target);
  }

  // optional double goal_width = 3;
  if (this->goal_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->goal_width(), target);
  }

  // optional double goal_depth = 4;
  if (this->goal_depth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->goal_depth(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fira_message.sim_to_ref.Field)
  return target;
}

int Field::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:fira_message.sim_to_ref.Field)
  int total_size = 0;

  // optional double width = 1;
  if (this->width() != 0) {
    total_size += 1 + 8;
  }

  // optional double length = 2;
  if (this->length() != 0) {
    total_size += 1 + 8;
  }

  // optional double goal_width = 3;
  if (this->goal_width() != 0) {
    total_size += 1 + 8;
  }

  // optional double goal_depth = 4;
  if (this->goal_depth() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fira_message.sim_to_ref.Field)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Field* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fira_message.sim_to_ref.Field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fira_message.sim_to_ref.Field)
    MergeFrom(*source);
  }
}

void Field::MergeFrom(const Field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fira_message.sim_to_ref.Field)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.goal_width() != 0) {
    set_goal_width(from.goal_width());
  }
  if (from.goal_depth() != 0) {
    set_goal_depth(from.goal_depth());
  }
}

void Field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fira_message.sim_to_ref.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Field::CopyFrom(const Field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fira_message.sim_to_ref.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Field::IsInitialized() const {

  return true;
}

void Field::Swap(Field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Field::InternalSwap(Field* other) {
  std::swap(width_, other->width_);
  std::swap(length_, other->length_);
  std::swap(goal_width_, other->goal_width_);
  std::swap(goal_depth_, other->goal_depth_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Field::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Field_descriptor_;
  metadata.reflection = Field_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Field

// optional double width = 1;
void Field::clear_width() {
  width_ = 0;
}
 double Field::width() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Field.width)
  return width_;
}
 void Field::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Field.width)
}

// optional double length = 2;
void Field::clear_length() {
  length_ = 0;
}
 double Field::length() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Field.length)
  return length_;
}
 void Field::set_length(double value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Field.length)
}

// optional double goal_width = 3;
void Field::clear_goal_width() {
  goal_width_ = 0;
}
 double Field::goal_width() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Field.goal_width)
  return goal_width_;
}
 void Field::set_goal_width(double value) {
  
  goal_width_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Field.goal_width)
}

// optional double goal_depth = 4;
void Field::clear_goal_depth() {
  goal_depth_ = 0;
}
 double Field::goal_depth() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Field.goal_depth)
  return goal_depth_;
}
 void Field::set_goal_depth(double value) {
  
  goal_depth_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Field.goal_depth)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Frame::kBallFieldNumber;
const int Frame::kRobotsYellowFieldNumber;
const int Frame::kRobotsBlueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Frame::Frame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fira_message.sim_to_ref.Frame)
}

void Frame::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ball_ = const_cast< ::fira_message::sim_to_ref::Ball*>(&::fira_message::sim_to_ref::Ball::default_instance());
}

Frame::Frame(const Frame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fira_message.sim_to_ref.Frame)
}

void Frame::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  ball_ = NULL;
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:fira_message.sim_to_ref.Frame)
  SharedDtor();
}

void Frame::SharedDtor() {
  if (this != default_instance_) {
    delete ball_;
  }
}

void Frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Frame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Frame_descriptor_;
}

const Frame& Frame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

Frame* Frame::default_instance_ = NULL;

Frame* Frame::New(::google::protobuf::Arena* arena) const {
  Frame* n = new Frame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:fira_message.sim_to_ref.Frame)
  if (GetArenaNoVirtual() == NULL && ball_ != NULL) delete ball_;
  ball_ = NULL;
  robots_yellow_.Clear();
  robots_blue_.Clear();
}

bool Frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fira_message.sim_to_ref.Frame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fira_message.sim_to_ref.Ball ball = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ball()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_robots_yellow;
        break;
      }

      // repeated .fira_message.sim_to_ref.Robot robots_yellow = 2;
      case 2: {
        if (tag == 18) {
         parse_robots_yellow:
          DO_(input->IncrementRecursionDepth());
         parse_loop_robots_yellow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_robots_yellow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_robots_yellow;
        if (input->ExpectTag(26)) goto parse_loop_robots_blue;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .fira_message.sim_to_ref.Robot robots_blue = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_robots_blue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_robots_blue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_robots_blue;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fira_message.sim_to_ref.Frame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fira_message.sim_to_ref.Frame)
  return false;
#undef DO_
}

void Frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fira_message.sim_to_ref.Frame)
  // optional .fira_message.sim_to_ref.Ball ball = 1;
  if (this->has_ball()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->ball_, output);
  }

  // repeated .fira_message.sim_to_ref.Robot robots_yellow = 2;
  for (unsigned int i = 0, n = this->robots_yellow_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->robots_yellow(i), output);
  }

  // repeated .fira_message.sim_to_ref.Robot robots_blue = 3;
  for (unsigned int i = 0, n = this->robots_blue_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->robots_blue(i), output);
  }

  // @@protoc_insertion_point(serialize_end:fira_message.sim_to_ref.Frame)
}

::google::protobuf::uint8* Frame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fira_message.sim_to_ref.Frame)
  // optional .fira_message.sim_to_ref.Ball ball = 1;
  if (this->has_ball()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->ball_, false, target);
  }

  // repeated .fira_message.sim_to_ref.Robot robots_yellow = 2;
  for (unsigned int i = 0, n = this->robots_yellow_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->robots_yellow(i), false, target);
  }

  // repeated .fira_message.sim_to_ref.Robot robots_blue = 3;
  for (unsigned int i = 0, n = this->robots_blue_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->robots_blue(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fira_message.sim_to_ref.Frame)
  return target;
}

int Frame::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:fira_message.sim_to_ref.Frame)
  int total_size = 0;

  // optional .fira_message.sim_to_ref.Ball ball = 1;
  if (this->has_ball()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ball_);
  }

  // repeated .fira_message.sim_to_ref.Robot robots_yellow = 2;
  total_size += 1 * this->robots_yellow_size();
  for (int i = 0; i < this->robots_yellow_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->robots_yellow(i));
  }

  // repeated .fira_message.sim_to_ref.Robot robots_blue = 3;
  total_size += 1 * this->robots_blue_size();
  for (int i = 0; i < this->robots_blue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->robots_blue(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Frame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fira_message.sim_to_ref.Frame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Frame* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Frame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fira_message.sim_to_ref.Frame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fira_message.sim_to_ref.Frame)
    MergeFrom(*source);
  }
}

void Frame::MergeFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fira_message.sim_to_ref.Frame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  robots_yellow_.MergeFrom(from.robots_yellow_);
  robots_blue_.MergeFrom(from.robots_blue_);
  if (from.has_ball()) {
    mutable_ball()->::fira_message::sim_to_ref::Ball::MergeFrom(from.ball());
  }
}

void Frame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fira_message.sim_to_ref.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fira_message.sim_to_ref.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {

  return true;
}

void Frame::Swap(Frame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Frame::InternalSwap(Frame* other) {
  std::swap(ball_, other->ball_);
  robots_yellow_.UnsafeArenaSwap(&other->robots_yellow_);
  robots_blue_.UnsafeArenaSwap(&other->robots_blue_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Frame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Frame_descriptor_;
  metadata.reflection = Frame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Frame

// optional .fira_message.sim_to_ref.Ball ball = 1;
bool Frame::has_ball() const {
  return !_is_default_instance_ && ball_ != NULL;
}
void Frame::clear_ball() {
  if (GetArenaNoVirtual() == NULL && ball_ != NULL) delete ball_;
  ball_ = NULL;
}
const ::fira_message::sim_to_ref::Ball& Frame::ball() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Frame.ball)
  return ball_ != NULL ? *ball_ : *default_instance_->ball_;
}
::fira_message::sim_to_ref::Ball* Frame::mutable_ball() {
  
  if (ball_ == NULL) {
    ball_ = new ::fira_message::sim_to_ref::Ball;
  }
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.Frame.ball)
  return ball_;
}
::fira_message::sim_to_ref::Ball* Frame::release_ball() {
  // @@protoc_insertion_point(field_release:fira_message.sim_to_ref.Frame.ball)
  
  ::fira_message::sim_to_ref::Ball* temp = ball_;
  ball_ = NULL;
  return temp;
}
void Frame::set_allocated_ball(::fira_message::sim_to_ref::Ball* ball) {
  delete ball_;
  ball_ = ball;
  if (ball) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fira_message.sim_to_ref.Frame.ball)
}

// repeated .fira_message.sim_to_ref.Robot robots_yellow = 2;
int Frame::robots_yellow_size() const {
  return robots_yellow_.size();
}
void Frame::clear_robots_yellow() {
  robots_yellow_.Clear();
}
const ::fira_message::sim_to_ref::Robot& Frame::robots_yellow(int index) const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Frame.robots_yellow)
  return robots_yellow_.Get(index);
}
::fira_message::sim_to_ref::Robot* Frame::mutable_robots_yellow(int index) {
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.Frame.robots_yellow)
  return robots_yellow_.Mutable(index);
}
::fira_message::sim_to_ref::Robot* Frame::add_robots_yellow() {
  // @@protoc_insertion_point(field_add:fira_message.sim_to_ref.Frame.robots_yellow)
  return robots_yellow_.Add();
}
::google::protobuf::RepeatedPtrField< ::fira_message::sim_to_ref::Robot >*
Frame::mutable_robots_yellow() {
  // @@protoc_insertion_point(field_mutable_list:fira_message.sim_to_ref.Frame.robots_yellow)
  return &robots_yellow_;
}
const ::google::protobuf::RepeatedPtrField< ::fira_message::sim_to_ref::Robot >&
Frame::robots_yellow() const {
  // @@protoc_insertion_point(field_list:fira_message.sim_to_ref.Frame.robots_yellow)
  return robots_yellow_;
}

// repeated .fira_message.sim_to_ref.Robot robots_blue = 3;
int Frame::robots_blue_size() const {
  return robots_blue_.size();
}
void Frame::clear_robots_blue() {
  robots_blue_.Clear();
}
const ::fira_message::sim_to_ref::Robot& Frame::robots_blue(int index) const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Frame.robots_blue)
  return robots_blue_.Get(index);
}
::fira_message::sim_to_ref::Robot* Frame::mutable_robots_blue(int index) {
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.Frame.robots_blue)
  return robots_blue_.Mutable(index);
}
::fira_message::sim_to_ref::Robot* Frame::add_robots_blue() {
  // @@protoc_insertion_point(field_add:fira_message.sim_to_ref.Frame.robots_blue)
  return robots_blue_.Add();
}
::google::protobuf::RepeatedPtrField< ::fira_message::sim_to_ref::Robot >*
Frame::mutable_robots_blue() {
  // @@protoc_insertion_point(field_mutable_list:fira_message.sim_to_ref.Frame.robots_blue)
  return &robots_blue_;
}
const ::google::protobuf::RepeatedPtrField< ::fira_message::sim_to_ref::Robot >&
Frame::robots_blue() const {
  // @@protoc_insertion_point(field_list:fira_message.sim_to_ref.Frame.robots_blue)
  return robots_blue_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Command::kIdFieldNumber;
const int Command::kYellowteamFieldNumber;
const int Command::kWheelLeftFieldNumber;
const int Command::kWheelRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Command::Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fira_message.sim_to_ref.Command)
}

void Command::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Command::Command(const Command& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fira_message.sim_to_ref.Command)
}

void Command::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0u;
  yellowteam_ = false;
  wheel_left_ = 0;
  wheel_right_ = 0;
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:fira_message.sim_to_ref.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}

const Command& Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

Command* Command::default_instance_ = NULL;

Command* Command::New(::google::protobuf::Arena* arena) const {
  Command* n = new Command;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:fira_message.sim_to_ref.Command)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Command, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Command*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, wheel_right_);

#undef ZR_HELPER_
#undef ZR_

}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fira_message.sim_to_ref.Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_yellowteam;
        break;
      }

      // optional bool yellowteam = 2;
      case 2: {
        if (tag == 16) {
         parse_yellowteam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &yellowteam_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_wheel_left;
        break;
      }

      // optional double wheel_left = 6;
      case 6: {
        if (tag == 49) {
         parse_wheel_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_left_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_wheel_right;
        break;
      }

      // optional double wheel_right = 7;
      case 7: {
        if (tag == 57) {
         parse_wheel_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_right_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fira_message.sim_to_ref.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fira_message.sim_to_ref.Command)
  return false;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fira_message.sim_to_ref.Command)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bool yellowteam = 2;
  if (this->yellowteam() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->yellowteam(), output);
  }

  // optional double wheel_left = 6;
  if (this->wheel_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->wheel_left(), output);
  }

  // optional double wheel_right = 7;
  if (this->wheel_right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->wheel_right(), output);
  }

  // @@protoc_insertion_point(serialize_end:fira_message.sim_to_ref.Command)
}

::google::protobuf::uint8* Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fira_message.sim_to_ref.Command)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bool yellowteam = 2;
  if (this->yellowteam() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->yellowteam(), target);
  }

  // optional double wheel_left = 6;
  if (this->wheel_left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->wheel_left(), target);
  }

  // optional double wheel_right = 7;
  if (this->wheel_right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->wheel_right(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fira_message.sim_to_ref.Command)
  return target;
}

int Command::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:fira_message.sim_to_ref.Command)
  int total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional bool yellowteam = 2;
  if (this->yellowteam() != 0) {
    total_size += 1 + 1;
  }

  // optional double wheel_left = 6;
  if (this->wheel_left() != 0) {
    total_size += 1 + 8;
  }

  // optional double wheel_right = 7;
  if (this->wheel_right() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fira_message.sim_to_ref.Command)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Command* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fira_message.sim_to_ref.Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fira_message.sim_to_ref.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fira_message.sim_to_ref.Command)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.yellowteam() != 0) {
    set_yellowteam(from.yellowteam());
  }
  if (from.wheel_left() != 0) {
    set_wheel_left(from.wheel_left());
  }
  if (from.wheel_right() != 0) {
    set_wheel_right(from.wheel_right());
  }
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fira_message.sim_to_ref.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fira_message.sim_to_ref.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {

  return true;
}

void Command::Swap(Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Command::InternalSwap(Command* other) {
  std::swap(id_, other->id_);
  std::swap(yellowteam_, other->yellowteam_);
  std::swap(wheel_left_, other->wheel_left_);
  std::swap(wheel_right_, other->wheel_right_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Command_descriptor_;
  metadata.reflection = Command_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Command

// optional uint32 id = 1;
void Command::clear_id() {
  id_ = 0u;
}
 ::google::protobuf::uint32 Command::id() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Command.id)
  return id_;
}
 void Command::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Command.id)
}

// optional bool yellowteam = 2;
void Command::clear_yellowteam() {
  yellowteam_ = false;
}
 bool Command::yellowteam() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Command.yellowteam)
  return yellowteam_;
}
 void Command::set_yellowteam(bool value) {
  
  yellowteam_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Command.yellowteam)
}

// optional double wheel_left = 6;
void Command::clear_wheel_left() {
  wheel_left_ = 0;
}
 double Command::wheel_left() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Command.wheel_left)
  return wheel_left_;
}
 void Command::set_wheel_left(double value) {
  
  wheel_left_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Command.wheel_left)
}

// optional double wheel_right = 7;
void Command::clear_wheel_right() {
  wheel_right_ = 0;
}
 double Command::wheel_right() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Command.wheel_right)
  return wheel_right_;
}
 void Command::set_wheel_right(double value) {
  
  wheel_right_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Command.wheel_right)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Commands::kRobotCommandsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Commands::Commands()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fira_message.sim_to_ref.Commands)
}

void Commands::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Commands::Commands(const Commands& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fira_message.sim_to_ref.Commands)
}

void Commands::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Commands::~Commands() {
  // @@protoc_insertion_point(destructor:fira_message.sim_to_ref.Commands)
  SharedDtor();
}

void Commands::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Commands::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Commands::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Commands_descriptor_;
}

const Commands& Commands::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

Commands* Commands::default_instance_ = NULL;

Commands* Commands::New(::google::protobuf::Arena* arena) const {
  Commands* n = new Commands;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Commands::Clear() {
// @@protoc_insertion_point(message_clear_start:fira_message.sim_to_ref.Commands)
  robot_commands_.Clear();
}

bool Commands::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fira_message.sim_to_ref.Commands)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .fira_message.sim_to_ref.Command robot_commands = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_robot_commands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_robot_commands()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_robot_commands;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fira_message.sim_to_ref.Commands)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fira_message.sim_to_ref.Commands)
  return false;
#undef DO_
}

void Commands::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fira_message.sim_to_ref.Commands)
  // repeated .fira_message.sim_to_ref.Command robot_commands = 1;
  for (unsigned int i = 0, n = this->robot_commands_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->robot_commands(i), output);
  }

  // @@protoc_insertion_point(serialize_end:fira_message.sim_to_ref.Commands)
}

::google::protobuf::uint8* Commands::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fira_message.sim_to_ref.Commands)
  // repeated .fira_message.sim_to_ref.Command robot_commands = 1;
  for (unsigned int i = 0, n = this->robot_commands_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->robot_commands(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fira_message.sim_to_ref.Commands)
  return target;
}

int Commands::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:fira_message.sim_to_ref.Commands)
  int total_size = 0;

  // repeated .fira_message.sim_to_ref.Command robot_commands = 1;
  total_size += 1 * this->robot_commands_size();
  for (int i = 0; i < this->robot_commands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->robot_commands(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Commands::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fira_message.sim_to_ref.Commands)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Commands* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Commands>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fira_message.sim_to_ref.Commands)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fira_message.sim_to_ref.Commands)
    MergeFrom(*source);
  }
}

void Commands::MergeFrom(const Commands& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fira_message.sim_to_ref.Commands)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  robot_commands_.MergeFrom(from.robot_commands_);
}

void Commands::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fira_message.sim_to_ref.Commands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Commands::CopyFrom(const Commands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fira_message.sim_to_ref.Commands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Commands::IsInitialized() const {

  return true;
}

void Commands::Swap(Commands* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Commands::InternalSwap(Commands* other) {
  robot_commands_.UnsafeArenaSwap(&other->robot_commands_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Commands::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Commands_descriptor_;
  metadata.reflection = Commands_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Commands

// repeated .fira_message.sim_to_ref.Command robot_commands = 1;
int Commands::robot_commands_size() const {
  return robot_commands_.size();
}
void Commands::clear_robot_commands() {
  robot_commands_.Clear();
}
const ::fira_message::sim_to_ref::Command& Commands::robot_commands(int index) const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Commands.robot_commands)
  return robot_commands_.Get(index);
}
::fira_message::sim_to_ref::Command* Commands::mutable_robot_commands(int index) {
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.Commands.robot_commands)
  return robot_commands_.Mutable(index);
}
::fira_message::sim_to_ref::Command* Commands::add_robot_commands() {
  // @@protoc_insertion_point(field_add:fira_message.sim_to_ref.Commands.robot_commands)
  return robot_commands_.Add();
}
::google::protobuf::RepeatedPtrField< ::fira_message::sim_to_ref::Command >*
Commands::mutable_robot_commands() {
  // @@protoc_insertion_point(field_mutable_list:fira_message.sim_to_ref.Commands.robot_commands)
  return &robot_commands_;
}
const ::google::protobuf::RepeatedPtrField< ::fira_message::sim_to_ref::Command >&
Commands::robot_commands() const {
  // @@protoc_insertion_point(field_list:fira_message.sim_to_ref.Commands.robot_commands)
  return robot_commands_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Packet::kCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Packet::Packet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fira_message.sim_to_ref.Packet)
}

void Packet::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  cmd_ = const_cast< ::fira_message::sim_to_ref::Commands*>(&::fira_message::sim_to_ref::Commands::default_instance());
}

Packet::Packet(const Packet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fira_message.sim_to_ref.Packet)
}

void Packet::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  cmd_ = NULL;
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:fira_message.sim_to_ref.Packet)
  SharedDtor();
}

void Packet::SharedDtor() {
  if (this != default_instance_) {
    delete cmd_;
  }
}

void Packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_descriptor_;
}

const Packet& Packet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

Packet* Packet::default_instance_ = NULL;

Packet* Packet::New(::google::protobuf::Arena* arena) const {
  Packet* n = new Packet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Packet::Clear() {
// @@protoc_insertion_point(message_clear_start:fira_message.sim_to_ref.Packet)
  if (GetArenaNoVirtual() == NULL && cmd_ != NULL) delete cmd_;
  cmd_ = NULL;
}

bool Packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fira_message.sim_to_ref.Packet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fira_message.sim_to_ref.Commands cmd = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fira_message.sim_to_ref.Packet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fira_message.sim_to_ref.Packet)
  return false;
#undef DO_
}

void Packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fira_message.sim_to_ref.Packet)
  // optional .fira_message.sim_to_ref.Commands cmd = 1;
  if (this->has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->cmd_, output);
  }

  // @@protoc_insertion_point(serialize_end:fira_message.sim_to_ref.Packet)
}

::google::protobuf::uint8* Packet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fira_message.sim_to_ref.Packet)
  // optional .fira_message.sim_to_ref.Commands cmd = 1;
  if (this->has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->cmd_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fira_message.sim_to_ref.Packet)
  return target;
}

int Packet::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:fira_message.sim_to_ref.Packet)
  int total_size = 0;

  // optional .fira_message.sim_to_ref.Commands cmd = 1;
  if (this->has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cmd_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fira_message.sim_to_ref.Packet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Packet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Packet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fira_message.sim_to_ref.Packet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fira_message.sim_to_ref.Packet)
    MergeFrom(*source);
  }
}

void Packet::MergeFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fira_message.sim_to_ref.Packet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_cmd()) {
    mutable_cmd()->::fira_message::sim_to_ref::Commands::MergeFrom(from.cmd());
  }
}

void Packet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fira_message.sim_to_ref.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet::CopyFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fira_message.sim_to_ref.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {

  return true;
}

void Packet::Swap(Packet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Packet::InternalSwap(Packet* other) {
  std::swap(cmd_, other->cmd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Packet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_descriptor_;
  metadata.reflection = Packet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Packet

// optional .fira_message.sim_to_ref.Commands cmd = 1;
bool Packet::has_cmd() const {
  return !_is_default_instance_ && cmd_ != NULL;
}
void Packet::clear_cmd() {
  if (GetArenaNoVirtual() == NULL && cmd_ != NULL) delete cmd_;
  cmd_ = NULL;
}
const ::fira_message::sim_to_ref::Commands& Packet::cmd() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Packet.cmd)
  return cmd_ != NULL ? *cmd_ : *default_instance_->cmd_;
}
::fira_message::sim_to_ref::Commands* Packet::mutable_cmd() {
  
  if (cmd_ == NULL) {
    cmd_ = new ::fira_message::sim_to_ref::Commands;
  }
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.Packet.cmd)
  return cmd_;
}
::fira_message::sim_to_ref::Commands* Packet::release_cmd() {
  // @@protoc_insertion_point(field_release:fira_message.sim_to_ref.Packet.cmd)
  
  ::fira_message::sim_to_ref::Commands* temp = cmd_;
  cmd_ = NULL;
  return temp;
}
void Packet::set_allocated_cmd(::fira_message::sim_to_ref::Commands* cmd) {
  delete cmd_;
  cmd_ = cmd;
  if (cmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fira_message.sim_to_ref.Packet.cmd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Environment::kStepFieldNumber;
const int Environment::kFrameFieldNumber;
const int Environment::kFieldFieldNumber;
const int Environment::kGoalsBlueFieldNumber;
const int Environment::kGoalsYellowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Environment::Environment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fira_message.sim_to_ref.Environment)
}

void Environment::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  frame_ = const_cast< ::fira_message::sim_to_ref::Frame*>(&::fira_message::sim_to_ref::Frame::default_instance());
  field_ = const_cast< ::fira_message::sim_to_ref::Field*>(&::fira_message::sim_to_ref::Field::default_instance());
}

Environment::Environment(const Environment& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fira_message.sim_to_ref.Environment)
}

void Environment::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  step_ = 0u;
  frame_ = NULL;
  field_ = NULL;
  goals_blue_ = 0u;
  goals_yellow_ = 0u;
}

Environment::~Environment() {
  // @@protoc_insertion_point(destructor:fira_message.sim_to_ref.Environment)
  SharedDtor();
}

void Environment::SharedDtor() {
  if (this != default_instance_) {
    delete frame_;
    delete field_;
  }
}

void Environment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Environment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Environment_descriptor_;
}

const Environment& Environment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

Environment* Environment::default_instance_ = NULL;

Environment* Environment::New(::google::protobuf::Arena* arena) const {
  Environment* n = new Environment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Environment::Clear() {
// @@protoc_insertion_point(message_clear_start:fira_message.sim_to_ref.Environment)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Environment, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Environment*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(step_, goals_blue_);
  if (GetArenaNoVirtual() == NULL && frame_ != NULL) delete frame_;
  frame_ = NULL;
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
  goals_yellow_ = 0u;

#undef ZR_HELPER_
#undef ZR_

}

bool Environment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fira_message.sim_to_ref.Environment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 step = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_frame;
        break;
      }

      // optional .fira_message.sim_to_ref.Frame frame = 2;
      case 2: {
        if (tag == 18) {
         parse_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frame()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_field;
        break;
      }

      // optional .fira_message.sim_to_ref.Field field = 3;
      case 3: {
        if (tag == 26) {
         parse_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_goals_blue;
        break;
      }

      // optional uint32 goals_blue = 4;
      case 4: {
        if (tag == 32) {
         parse_goals_blue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goals_blue_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_goals_yellow;
        break;
      }

      // optional uint32 goals_yellow = 5;
      case 5: {
        if (tag == 40) {
         parse_goals_yellow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goals_yellow_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fira_message.sim_to_ref.Environment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fira_message.sim_to_ref.Environment)
  return false;
#undef DO_
}

void Environment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fira_message.sim_to_ref.Environment)
  // optional uint32 step = 1;
  if (this->step() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->step(), output);
  }

  // optional .fira_message.sim_to_ref.Frame frame = 2;
  if (this->has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->frame_, output);
  }

  // optional .fira_message.sim_to_ref.Field field = 3;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->field_, output);
  }

  // optional uint32 goals_blue = 4;
  if (this->goals_blue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->goals_blue(), output);
  }

  // optional uint32 goals_yellow = 5;
  if (this->goals_yellow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->goals_yellow(), output);
  }

  // @@protoc_insertion_point(serialize_end:fira_message.sim_to_ref.Environment)
}

::google::protobuf::uint8* Environment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fira_message.sim_to_ref.Environment)
  // optional uint32 step = 1;
  if (this->step() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->step(), target);
  }

  // optional .fira_message.sim_to_ref.Frame frame = 2;
  if (this->has_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->frame_, false, target);
  }

  // optional .fira_message.sim_to_ref.Field field = 3;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->field_, false, target);
  }

  // optional uint32 goals_blue = 4;
  if (this->goals_blue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->goals_blue(), target);
  }

  // optional uint32 goals_yellow = 5;
  if (this->goals_yellow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->goals_yellow(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fira_message.sim_to_ref.Environment)
  return target;
}

int Environment::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:fira_message.sim_to_ref.Environment)
  int total_size = 0;

  // optional uint32 step = 1;
  if (this->step() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->step());
  }

  // optional .fira_message.sim_to_ref.Frame frame = 2;
  if (this->has_frame()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->frame_);
  }

  // optional .fira_message.sim_to_ref.Field field = 3;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field_);
  }

  // optional uint32 goals_blue = 4;
  if (this->goals_blue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->goals_blue());
  }

  // optional uint32 goals_yellow = 5;
  if (this->goals_yellow() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->goals_yellow());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Environment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fira_message.sim_to_ref.Environment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Environment* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Environment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fira_message.sim_to_ref.Environment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fira_message.sim_to_ref.Environment)
    MergeFrom(*source);
  }
}

void Environment::MergeFrom(const Environment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fira_message.sim_to_ref.Environment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.step() != 0) {
    set_step(from.step());
  }
  if (from.has_frame()) {
    mutable_frame()->::fira_message::sim_to_ref::Frame::MergeFrom(from.frame());
  }
  if (from.has_field()) {
    mutable_field()->::fira_message::sim_to_ref::Field::MergeFrom(from.field());
  }
  if (from.goals_blue() != 0) {
    set_goals_blue(from.goals_blue());
  }
  if (from.goals_yellow() != 0) {
    set_goals_yellow(from.goals_yellow());
  }
}

void Environment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fira_message.sim_to_ref.Environment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Environment::CopyFrom(const Environment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fira_message.sim_to_ref.Environment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Environment::IsInitialized() const {

  return true;
}

void Environment::Swap(Environment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Environment::InternalSwap(Environment* other) {
  std::swap(step_, other->step_);
  std::swap(frame_, other->frame_);
  std::swap(field_, other->field_);
  std::swap(goals_blue_, other->goals_blue_);
  std::swap(goals_yellow_, other->goals_yellow_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Environment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Environment_descriptor_;
  metadata.reflection = Environment_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Environment

// optional uint32 step = 1;
void Environment::clear_step() {
  step_ = 0u;
}
 ::google::protobuf::uint32 Environment::step() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Environment.step)
  return step_;
}
 void Environment::set_step(::google::protobuf::uint32 value) {
  
  step_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Environment.step)
}

// optional .fira_message.sim_to_ref.Frame frame = 2;
bool Environment::has_frame() const {
  return !_is_default_instance_ && frame_ != NULL;
}
void Environment::clear_frame() {
  if (GetArenaNoVirtual() == NULL && frame_ != NULL) delete frame_;
  frame_ = NULL;
}
const ::fira_message::sim_to_ref::Frame& Environment::frame() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Environment.frame)
  return frame_ != NULL ? *frame_ : *default_instance_->frame_;
}
::fira_message::sim_to_ref::Frame* Environment::mutable_frame() {
  
  if (frame_ == NULL) {
    frame_ = new ::fira_message::sim_to_ref::Frame;
  }
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.Environment.frame)
  return frame_;
}
::fira_message::sim_to_ref::Frame* Environment::release_frame() {
  // @@protoc_insertion_point(field_release:fira_message.sim_to_ref.Environment.frame)
  
  ::fira_message::sim_to_ref::Frame* temp = frame_;
  frame_ = NULL;
  return temp;
}
void Environment::set_allocated_frame(::fira_message::sim_to_ref::Frame* frame) {
  delete frame_;
  frame_ = frame;
  if (frame) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fira_message.sim_to_ref.Environment.frame)
}

// optional .fira_message.sim_to_ref.Field field = 3;
bool Environment::has_field() const {
  return !_is_default_instance_ && field_ != NULL;
}
void Environment::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
const ::fira_message::sim_to_ref::Field& Environment::field() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Environment.field)
  return field_ != NULL ? *field_ : *default_instance_->field_;
}
::fira_message::sim_to_ref::Field* Environment::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::fira_message::sim_to_ref::Field;
  }
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.Environment.field)
  return field_;
}
::fira_message::sim_to_ref::Field* Environment::release_field() {
  // @@protoc_insertion_point(field_release:fira_message.sim_to_ref.Environment.field)
  
  ::fira_message::sim_to_ref::Field* temp = field_;
  field_ = NULL;
  return temp;
}
void Environment::set_allocated_field(::fira_message::sim_to_ref::Field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fira_message.sim_to_ref.Environment.field)
}

// optional uint32 goals_blue = 4;
void Environment::clear_goals_blue() {
  goals_blue_ = 0u;
}
 ::google::protobuf::uint32 Environment::goals_blue() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Environment.goals_blue)
  return goals_blue_;
}
 void Environment::set_goals_blue(::google::protobuf::uint32 value) {
  
  goals_blue_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Environment.goals_blue)
}

// optional uint32 goals_yellow = 5;
void Environment::clear_goals_yellow() {
  goals_yellow_ = 0u;
}
 ::google::protobuf::uint32 Environment::goals_yellow() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Environment.goals_yellow)
  return goals_yellow_;
}
 void Environment::set_goals_yellow(::google::protobuf::uint32 value) {
  
  goals_yellow_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Environment.goals_yellow)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_to_ref
}  // namespace fira_message

// @@protoc_insertion_point(global_scope)
